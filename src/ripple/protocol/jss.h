

#ifndef RIPPLE_PROTOCOL_JSONFIELDS_H_INCLUDED
#define RIPPLE_PROTOCOL_JSONFIELDS_H_INCLUDED

#include <ripple/json/json_value.h>

namespace ripple {
namespace jss {


#define JSS(x) constexpr ::Json::StaticString x ( #x )



JSS ( AL_hit_rate );                
JSS ( Account );                    
JSS ( AccountRoot );                
JSS ( AccountSet );                 
JSS ( Amendments );                 
JSS ( Amount );                     
JSS ( Check );                      
JSS ( CheckCancel );                
JSS ( CheckCash );                  
JSS ( CheckCreate );                
JSS ( ClearFlag );                  
JSS ( DeliverMin );                 
JSS ( DepositPreauth );             
JSS ( Destination );                
JSS ( DirectoryNode );              
JSS ( EnableAmendment );            
JSS ( Escrow );                     
JSS ( EscrowCancel );               
JSS ( EscrowCreate );               
JSS ( EscrowFinish );               
JSS ( Fee );                        
JSS ( FeeSettings );                
JSS ( Flags );                      
JSS ( Invalid );                    
JSS ( LastLedgerSequence );         
JSS ( LedgerHashes );               
JSS ( LimitAmount );                
JSS ( Offer );                      
JSS ( OfferCancel );                
JSS ( OfferCreate );                
JSS ( OfferSequence );              
JSS ( Paths );                      
JSS ( PayChannel );                 
JSS ( Payment );                    
JSS ( PaymentChannelClaim );        
JSS ( PaymentChannelCreate );       
JSS ( PaymentChannelFund );         
JSS ( RippleState );                
JSS ( SLE_hit_rate );               
JSS ( SetFee );                     
JSS ( SettleDelay );                
JSS ( SendMax );                    
JSS ( Sequence );                   
JSS ( SetFlag );                    
JSS ( SetRegularKey );              
JSS ( SignerList );                 
JSS ( SignerListSet );              
JSS ( SigningPubKey );              
JSS ( TakerGets );                  
JSS ( TakerPays );                  
JSS ( Ticket );                     
JSS ( TicketCancel );               
JSS ( TicketCreate );               
JSS ( TxnSignature );               
JSS ( TransactionType );            
JSS ( TransferRate );               
JSS ( TrustSet );                   
JSS ( aborted );                    
JSS ( accepted );                   
JSS ( account );                    
JSS ( accountState );               
JSS ( accountTreeHash );            
JSS ( account_data );               
JSS ( account_hash );               
JSS ( account_id );                 
JSS ( account_objects );            
JSS ( account_root );               
JSS ( accounts );                   
JSS ( accounts_proposed );          
JSS ( action );
JSS ( acquiring );                  
JSS ( address );                    
JSS ( affected );                   
JSS ( age );                        
JSS ( alternatives );               
JSS ( amendment_blocked );          
JSS ( amendments );                 
JSS ( amount );                     
JSS ( asks );                       
JSS ( assets );                     
JSS ( authorized );                 
JSS ( auth_change );                
JSS ( auth_change_queued );         
JSS ( available );                  
JSS ( balance );                    
JSS ( balances );                   
JSS ( base );                       
JSS ( base_fee );                   
JSS ( base_fee_xrp );               
JSS ( bids );                       
JSS ( binary );                     
JSS ( books );                      
JSS ( both );                       
JSS ( both_sides );                 
JSS ( build_path );                 
JSS ( build_version );              
JSS ( cancel_after );               
JSS ( can_delete );                 
JSS ( channel_id );                 
JSS ( channels );                   
JSS ( check );                      
JSS ( check_nodes );                
JSS ( clear );                      
JSS ( close_flags );                
JSS ( close_time );                 
JSS ( close_time_estimated );       
JSS ( close_time_human );           
JSS ( close_time_offset );          
JSS ( close_time_resolution );      
JSS ( closed );                     
JSS ( closed_ledger );              
JSS ( cluster );                    
JSS ( code );                       
JSS ( command );                    
JSS ( complete );                   
JSS ( complete_ledgers );           
JSS ( complete_shards );            
JSS ( consensus );                  
JSS ( converge_time );              
JSS ( converge_time_s );            
JSS ( count );                      
JSS ( counters );                   
JSS ( currency );                   
JSS ( current );                    
JSS ( current_activities );
JSS ( current_ledger_size );        
JSS ( current_queue_size );         
JSS ( data );                       
JSS ( date );                       
JSS ( dbKBLedger );                 
JSS ( dbKBTotal );                  
JSS ( dbKBTransaction );            
JSS ( debug_signing );              
JSS ( delivered_amount );           
JSS ( deposit_authorized );         
JSS ( deposit_preauth );            
JSS ( deprecated );                 
JSS ( descending );                 
JSS ( destination_account );        
JSS ( destination_amount );         
JSS ( destination_currencies );     
JSS ( destination_tag );            
JSS ( dir_entry );                  
JSS ( dir_index );                  
JSS ( dir_root );                   
JSS ( directory );                  
JSS ( drops );                      
JSS ( duration_us );                
JSS ( enabled );                    
JSS ( engine_result );              
JSS ( engine_result_code );         
JSS ( engine_result_message );      
JSS ( error );                      
JSS ( errored );
JSS ( error_code );                 
JSS ( error_exception );            
JSS ( error_message );              
JSS ( escrow );                     
JSS ( expand );                     
JSS ( expected_ledger_size );       
JSS ( expiration );                 
JSS ( fail_hard );                  
JSS ( failed );                     
JSS ( feature );                    
JSS ( features );                   
JSS ( fee );                        
JSS ( fee_base );                   
JSS ( fee_div_max );                
JSS ( fee_level );                  
JSS ( fee_mult_max );               
JSS ( fee_ref );                    
JSS ( fetch_pack );                 
JSS ( first );                      
JSS ( finished );
JSS ( fix_txns );                   
JSS ( flags );                      
JSS ( forward );                    
JSS ( freeze );                     
JSS ( freeze_peer );                
JSS ( frozen_balances );            
JSS ( full );                       
JSS ( full_reply );                 
JSS ( fullbelow_size );             
JSS ( good );                       
JSS ( hash );                       
JSS ( hashes );                     
JSS ( have_header );                
JSS ( have_state );                 
JSS ( have_transactions );          
JSS ( highest_sequence );           
JSS ( historical_perminute );       
JSS ( hostid );                     
JSS ( hotwallet );                  
JSS ( id );                         
JSS ( ident );                      
JSS ( inLedger );                   
JSS ( inbound );                    
JSS ( index );                      
JSS ( info );                       
JSS ( internal_command );           
JSS ( io_latency_ms );              
JSS ( ip );                         
JSS ( issuer );                     
JSS ( job );
JSS ( job_queue );
JSS ( jobs );
JSS ( jsonrpc );                    
JSS ( jq_trans_overflow );          
JSS ( key );                        
JSS ( key_type );                   
JSS ( latency );                    
JSS ( last );                       
JSS ( last_close );                 
JSS ( last_refresh_time );          
JSS ( last_refresh_status );        
JSS ( last_refresh_message );       
JSS ( ledger );                     
JSS ( ledger_current_index );       
JSS ( ledger_data );                
JSS ( ledger_hash );                
JSS ( ledger_hit_rate );            
JSS ( ledger_index );               
JSS ( ledger_index_max );           
JSS ( ledger_index_min );           
JSS ( ledger_max );                 
JSS ( ledger_min );                 
JSS ( ledger_time );                
JSS ( levels );                     
JSS ( limit );                      
JSS ( limit_peer );                 
JSS ( lines );                      
JSS ( list );                       
JSS ( load );                       
JSS ( load_base );                  
JSS ( load_factor );                
JSS ( load_factor_cluster );        
JSS ( load_factor_fee_escalation ); 
JSS ( load_factor_fee_queue );      
JSS ( load_factor_fee_reference );  
JSS ( load_factor_local );          
JSS ( load_factor_net );            
JSS ( load_factor_server );         
JSS ( load_fee );                   
JSS ( local );                      
JSS ( local_txs );                  
JSS ( local_static_keys );          
JSS ( lowest_sequence );            
JSS ( majority );                   
JSS ( marker );                     
JSS ( master_key );                 
JSS ( master_seed );                
JSS ( master_seed_hex );            
JSS ( master_signature );           
JSS ( max_ledger );                 
JSS ( max_queue_size );             
JSS ( max_spend_drops );            
JSS ( max_spend_drops_total );      
JSS ( median_fee );                 
JSS ( median_level );               
JSS ( message );                    
JSS ( meta );                       
JSS ( metaData );
JSS ( metadata );                   
JSS ( method );                     
JSS ( methods );
JSS ( min_count );                  
JSS ( min_ledger );                 
JSS ( minimum_fee );                
JSS ( minimum_level );              
JSS ( missingCommand );             
JSS ( name );                       
JSS ( needed_state_hashes );        
JSS ( needed_transaction_hashes );  
JSS ( network_ledger );             
JSS ( next_refresh_time );          
JSS ( no_ripple );                  
JSS ( no_ripple_peer );             
JSS ( node );                       
JSS ( node_binary );                
JSS ( node_hit_rate );              
JSS ( node_read_bytes );            
JSS ( node_reads_hit );             
JSS ( node_reads_total );           
JSS ( node_writes );                
JSS ( node_written_bytes );         
JSS ( nodes );                      
JSS ( obligations );                
JSS ( offer );                      
JSS ( offers );                     
JSS ( offline );                    
JSS ( offset );                     
JSS ( open );                       
JSS ( open_ledger_fee );            
JSS ( open_ledger_level );          
JSS ( owner );                      
JSS ( owner_funds );                
JSS ( params );                     
JSS ( parent_close_time );          
JSS ( parent_hash );                
JSS ( partition );                  
JSS ( passphrase );                 
JSS ( password );                   
JSS ( paths );                      
JSS ( paths_canonical );            
JSS ( paths_computed );             
JSS ( payment_channel );            
JSS ( peer );                       
JSS ( peer_authorized );            
JSS ( peer_id );                    
JSS ( peers );                      
JSS ( peer_disconnects );           
JSS ( peer_disconnects_resources ); 
JSS ( port );                       
JSS ( previous_ledger );            
JSS ( proof );                      
JSS ( propose_seq );                
JSS ( proposers );                  
JSS ( protocol );                   
JSS ( proxied );                    
JSS ( pubkey_node );                
JSS ( pubkey_publisher );           
JSS ( pubkey_validator );           
JSS ( public_key );                 
JSS ( public_key_hex );             
JSS ( published_ledger );           
JSS ( publisher_lists );            
JSS ( quality );                    
JSS ( quality_in );                 
JSS ( quality_out );                
JSS ( queue );                      
JSS ( queue_data );                 
JSS ( queued );
JSS ( queued_duration_us );
JSS ( random );                     
JSS ( raw_meta );                   
JSS ( receive_currencies );         
JSS ( reference_level );            
JSS ( refresh_interval_min );       
JSS ( regular_seed );               
JSS ( remote );                     
JSS ( request );                    
JSS ( reserve_base );               
JSS ( reserve_base_xrp );           
JSS ( reserve_inc );                
JSS ( reserve_inc_xrp );            
JSS ( response );                   
JSS ( result );                     
JSS ( ripple_lines );               
JSS ( ripple_state );               
JSS ( ripplerpc );                  
JSS ( role );                       
JSS ( rpc );
JSS ( rt_accounts );                
JSS ( running_duration_us );
JSS ( sanity );                     
JSS ( search_depth );               
JSS ( secret );                     
JSS ( seed );                       
JSS ( seed_hex );                   
JSS ( send_currencies );            
JSS ( send_max );                   
JSS ( seq );                        
JSS ( seqNum );                     
JSS ( server_state );               
JSS ( server_state_duration_us );   
JSS ( server_status );              
JSS ( settle_delay );               
JSS ( severity );                   
JSS ( shards );                     
JSS ( signature );                  
JSS ( signature_verified );         
JSS ( signing_key );                
JSS ( signing_keys );               
JSS ( signing_time );               
JSS ( signer_list );                
JSS ( signer_lists );               
JSS ( snapshot );                   
JSS ( source_account );             
JSS ( source_amount );              
JSS ( source_currencies );          
JSS ( source_tag );                 
JSS ( stand_alone );                
JSS ( start );                      
JSS ( started );
JSS ( state );                      
JSS ( state_accounting );           
JSS ( state_now );                  
JSS ( status );                     
JSS ( stop );                       
JSS ( streams );                    
JSS ( strict );                     
JSS ( sub_index );                  
JSS ( subcommand );                 
JSS ( success );                    
JSS ( supported );                  
JSS ( system_time_offset );         
JSS ( tag );                        
JSS ( taker );                      
JSS ( taker_gets );                 
JSS ( taker_gets_funded );          
JSS ( taker_pays );                 
JSS ( taker_pays_funded );          
JSS ( threshold );                  
JSS ( ticket );                     
JSS ( time );
JSS ( timeouts );                   
JSS ( traffic );                    
JSS ( total );                      
JSS ( totalCoins );                 
JSS ( total_coins );                
JSS ( transTreeHash );              
JSS ( transaction );                
JSS ( transaction_hash );           
JSS ( transactions );               
JSS ( transitions );                
JSS ( treenode_cache_size );        
JSS ( treenode_track_size );        
JSS ( trusted );                    
JSS ( trusted_validator_keys );     
JSS ( tx );                         
JSS ( tx_blob );                    
JSS ( tx_hash );                    
JSS ( tx_json );                    
JSS ( tx_signing_hash );            
JSS ( tx_unsigned );                
JSS ( txn_count );                  
JSS ( txs );                        
JSS ( type );                       
JSS ( type_hex );                   
JSS ( unl );                        
JSS ( unlimited);                   
JSS ( uptime );                     
JSS ( uri );                        
JSS ( url );                        
JSS ( url_password );               
JSS ( url_username );               
JSS ( urlgravatar );                
JSS ( username );                   
JSS ( validate );                   
JSS ( validated );                  
JSS ( validator_list_expires );     
JSS ( validator_list );             
JSS ( validators );
JSS ( validated_ledger );           
JSS ( validated_ledgers );          
JSS ( validation_key );             
JSS ( validation_private_key );     
JSS ( validation_public_key );      
JSS ( validation_quorum );          
JSS ( validation_seed );            
JSS ( validations );                
JSS ( validator_sites );            
JSS ( value );                      
JSS ( version );                    
JSS ( vetoed );                     
JSS ( vote );                       
JSS ( warning );                    
JSS ( workers );
JSS ( write_load );                 

#undef JSS

} 
} 

#endif








